// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?

  chats    Chat[]   @relation(fields: [chatsIds], references: [id])
  chatsIds String[] @db.ObjectId

  messages    Message[] @relation("seen")
  accounts    Account[]
  sessions    Session[]
  contacts    Contact[] @relation("contacts")
  credentials Contact[] @relation("credentials")
}

model Contact {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation("contacts", fields: [userId], references: [id])
  userId String @db.ObjectId

  contact   User   @relation("credentials", fields: [contactId], references: [id])
  contactId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  members    User[]   @relation(fields: [membersIds], references: [id])
  membersIds String[] @db.ObjectId

  messages  Message[] @relation("messages")
  createdAt DateTime  @default(now())
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  chat   Chat   @relation("messages", fields: [chatId], references: [id])
  chatId String @db.ObjectId

  sender   User   @relation("seen", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
